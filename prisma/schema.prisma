// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model Widget {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
}

model Espresso {
  id              Int      @id @default(sequence())
  grindSize       Decimal  @db.Decimal(10, 2)
  doseGrams       Decimal  @db.Decimal(10, 2)
  durationSeconds Int
  extractionGrams Decimal  @db.Decimal(10, 2)
  stopTimeSeconds Int
  taste           String   @db.String(255)
  description     String?  @db.String(65535)
  grinder         String?  @db.String(255)
  date            DateTime
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Foreign key for Bean relationship
  beanId Int
  bean   Bean @relation(fields: [beanId], references: [id])

  // Foreign key for User relationship
  assignedToUserId String? @db.String(255)
  assignedToUser   User?   @relation(fields: [assignedToUserId], references: [id])
}

model Bean {
  id         Int        @id @default(sequence())
  name       String     @db.String(255)
  roaster    String     @db.String(510)
  roastLevel String     @db.String(255)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  // Relation field showing which Espresso entities use this Bean
  espressos  Espresso[]

  // Foreign key for User relationship
  assignedToUserId String? @db.String(255)
  assignedToUser   User?   @relation(fields: [assignedToUserId], references: [id])
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  assignedEspressos Espresso[]
  assignedBeans     Bean[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
